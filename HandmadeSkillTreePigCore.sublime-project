{
	"folders":
	[
		{
			"name": "Root",
			"path": ".",
			"folder_exclude_patterns": [
				"_build",
				"_data",
				"core",
				"third_party",
			],
			"file_exclude_patterns": [
				"*.glsl.h",
				"*.glsl.c",
			],
		},
		{
			"name": "PigCore",
			"path": "core",
			"folder_exclude_patterns": [
				"_build",
				"_media",
				"_template",
				"third_party",
				"wasm",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				"*.sublime-project",
				"*.sublime-workspace",
				"NOTES.todo",
				"LICENSE.txt",
				"README.md",
				"*.rdbg",
				"build.bat",
				"build.sh",
				"build_config.h",
			],
		},
		{
			"name": "Stb",
			"path": "core/third_party/stb",
			"file_include_patterns": [
				"stb_image.h",
				"stb_image_write.h",
				"stb_rect_pack.h",
				"stb_sprintf.h",
				"stb_truetype.h",
				"stb_vorbis.h",
			],
		},
		{
			"name": "raylib",
			"path": "core/third_party/raylib",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Box2D",
			"path": "core/third_party/box2d",
			"file_exclude_patterns": [
				"LICENSE",
			],
		},
		{
			"name": "Sokol",
			"path": "core/third_party/sokol",
			"folder_exclude_patterns": [
				".github",
				"tests",
			],
			"file_exclude_patterns": [
				".gitignore",
				".editorconfig",
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "HandmadeMath",
			"path": "core/third_party/handmade_math",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "meow_hash",
			"path": "core/third_party/meow_hash",
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "cgltf",
			"path": "core/third_party/cgltf",
			"folder_exclude_patterns": [
				".github",
				"fuzz",
				"test",
			],
			"file_exclude_patterns": [
				"LICENSE",
				"README.md",
			],
		},
		{
			"name": "Clay",
			"path": "core/third_party/clay",
			"folder_exclude_patterns": [
				".github",
				"bindings",
				"cmake",
			],
			"file_exclude_patterns": [
				".dockerignore",
				".gitignore",
				"CMakeLists.txt",
				"LICENSE.md",
				"README.md",
			],
		},
		{
			"name": "cimgui",
			"path": "core/third_party/cimgui",
		},
		{
			"name": "Dear ImGui",
			"path": "core/third_party/imgui",
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"BUILDING_AS_DLL",
			"BUILD_GAME_DLL",
			"BUILD_GAME_EXE",
			"BUILD_INTO_SINGLE_UNIT",
			"BUILD_PIGGEN_IF_NEEDED",
			"BUILD_PIG_CORE_LIB",
			"BUILD_PIG_CORE_LIB_IF_NEEDED",
			"COPY_TO_DATA_DIRECTORY",
			"MAX_NODE_NAME_WIDTH",
			"NUM_UI_COLORS",
			"PIG_CORE_BUILDING_AS_DLL",
			"PIG_CORE_IMPLEMENTATION",
			"PIG_CORE_INLINE",
			"TOPBAR_ICONS_PADDING",
			"TreeBranchType_Commonality",
			"TreeBranchType_Count",
			"TreeBranchType_Dependency",
			"TreeBranchType_None",
			"TreeBranchType_Reference",
			"TreeNodeType_API",
			"TreeNodeType_Concept",
			"TreeNodeType_Count",
			"TreeNodeType_Language",
			"TreeNodeType_None",
			"TreeNodeType_Project",
			"UI_FONT_NAME",
			"UI_FONT_SIZE",
			"UI_FONT_STYLE",
		],
		"custom_functions":
		[
			"#define BeginFrame(swapchain, screenSize, clearColor, clearDepth)",
			"#define CLAY_ICON(texturePntr, size, color)",
			"#define DrawLine(startPos, endPos, thickness, color)",
			"#define InitVarArray(type, arrayPntr, arena)",
			"#define InitVarArrayWithInitial(type, arrayPntr, arena, initialCountNeeded)",
			"#define MakeRotate2DMat4(angle)",
			"#define VarArrayAdd(type, arrayPntr)",
			"#define VarArrayAddMulti(type, arrayPntr, numItems)",
			"#define VarArrayAddValue(type, arrayPntr, value)",
			"#define VarArrayContains(type, arrayPntr, itemPntrInQuestion)",
			"#define VarArrayCopy(destArray, sourceArray, arenaPntr)",
			"#define VarArrayGet(type, arrayPntr, index)",
			"#define VarArrayGetAndRemoveValueAt(type, arrayPntr, index)",
			"#define VarArrayGetFirst(type, arrayPntr)",
			"#define VarArrayGetFirstHard(type, arrayPntr)",
			"#define VarArrayGetFirstSoft(type, arrayPntr)",
			"#define VarArrayGetFirstValue(type, arrayPntr)",
			"#define VarArrayGetFirstValueHard(type, arrayPntr)",
			"#define VarArrayGetHard(type, arrayPntr, index)",
			"#define VarArrayGetIndexOf(type, arrayPntr, itemInQuestion, indexOut)",
			"#define VarArrayGetLast(type, arrayPntr)",
			"#define VarArrayGetLastHard(type, arrayPntr)",
			"#define VarArrayGetLastSoft(type, arrayPntr)",
			"#define VarArrayGetLastValue(type, arrayPntr)",
			"#define VarArrayGetLastValueHard(type, arrayPntr)",
			"#define VarArrayGetSoft(type, arrayPntr, index)",
			"#define VarArrayGetValue(type, arrayPntr, index)",
			"#define VarArrayGetValueHard(type, arrayPntr, index)",
			"#define VarArrayInsert(type, arrayPntr, index)",
			"#define VarArrayInsertValue(type, arrayPntr, index, value)",
			"#define VarArrayLoop(arrayPntr, indexVarName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayLoopGetValue(type, varName, arrayPntr, indexVarName)",
			"#define VarArrayPop(type, arrayPntr)",
			"#define VarArrayPush(type, arrayPntr, value)",
			"#define VarArrayRemove(type, arrayPntr, itemPntr)",
			"#define VarArrayRemoveAt(type, arrayPntr, index)",
			"#define VarArrayRemoveFirst(type, arrayPntr)",
			"#define VarArrayRemoveLast(type, arrayPntr)",
			"Clay_ImageElementConfig ToClayImage(Texture* texture)",
			"FontAtlas* GetDefaultFontAtlas(PigFont* font)",
			"PEXP bool VarArrayExpand(struct VarArray* array, uxx capacityRequired)",
			"Result BakeFontAtlas(PigFont* font, r32 fontSize, u8 extraStyleFlags, v2i atlasSize, uxx numCharRanges, const FontCharRange* charRanges)",
			"Result OsLoadDll(FilePath path, OsDll* dllOut)",
			"Result TryParseImageFile(Slice fileContents, Arena* arena, ImageData* imageDataOut)",
			"TreeBranch* AddTreeBranch(SkillTree* tree, TreeBranchType type, Str8 name, uxx fromId, uxx toId)",
			"TreeBranch* GetBranchForNode(SkillTree* tree, TreeNode* node, bool includeIncoming, bool includeOutgoing, uxx index, TreeNode** nodeOut)",
			"TreeBranch* GetTreeBranchById(SkillTree* tree, uxx nodeId, uxx index)",
			"TreeNode* AddTreeNode(SkillTree* tree, TreeNodeType type, Str8 name, v2 position, Color32 color)",
			"TreeNode* GetTreeNodeById(SkillTree* tree, uxx nodeId)",
			"bool ClayBtn(const char* btnText, const char* hotkeyStr, bool isEnabled, Texture* icon)",
			"bool ClayBtnStr(Str8 btnText, Str8 hotkeyStr, bool isEnabled, Texture* icon)",
			"bool ClayBtnStrEx(Str8 idStr, Str8 btnText, Str8 hotkeyStr, bool isEnabled, Texture* icon)",
			"bool ClayTopBtn(const char* btnText, bool showAltText, bool* isOpenPntr, bool* keepOpenUntilMouseoverPntr, bool isSubmenuOpen)",
			"bool DoesFontAtlasContainCodepoint(const FontAtlas* atlas, u32 codepoint)",
			"bool DoesFontAtlasContainCodepointEx(const FontAtlas* atlas, u32 codepoint, uxx* glyphIndexOut)",
			"bool IsMouseOverClay(ClayId clayId)",
			"bool IsMouseOverClayInContainer(ClayId containerId, ClayId clayId)",
			"const char* GetTreeBranchTypeStr(TreeBranchType enumValue)",
			"const char* GetTreeNodeTypeStr(TreeNodeType enumValue)",
			"r32 GetDefaultFontSize(const PigFont* font)",
			"u16 AddClayUIRendererFont(ClayUIRenderer* renderer, PigFont* fontPntr, u8 styleFlags)",
			"u16 GetClayUIRendererFontId(ClayUIRenderer* renderer, PigFont* fontPntr, u8 styleFlags)",
			"u8 GetDefaultFontStyleFlags(const PigFont* font)",
			"void BakeTreeReferences(SkillTree* tree)",
			"void FreeSkillTree(SkillTree* tree)",
			"void FreeTreeNode(SkillTree* tree, TreeNode* node)",
			"void GfxSystem_DrawLine(GfxSystem* system, v2 startPos, v2 endPos, r32 thickness, Color32 color)",
			"void InitClayUIRenderer(Arena* arena, v2 windowSize, ClayUIRenderer* rendererOut)",
			"void RemoveTreeBranch(SkillTree* tree, TreeBranch* branch)",
			"void RemoveTreeBranchesForId(SkillTree* tree, uxx nodeId)",
			"void RemoveTreeNode(SkillTree* tree, TreeNode* node)",
			"void RemoveTreeNodeById(SkillTree* tree, uxx nodeId)",
			"void RenderClayCommandArray(ClayUIRenderer* renderer, GfxSystem* system, Clay_RenderCommandArray* commands)",
		],
		"custom_globals":
		[
		],
		"custom_types":
		[
			"OsDll",
			"SkillTree",
			"TreeBranch",
			"TreeBranchType",
			"TreeNode",
			"TreeNodeType",
			"TreeReference",
		],
	},
}
